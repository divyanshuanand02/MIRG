# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ssl_msgs/trajectory.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import ssl_msgs.msg

class trajectory(genpy.Message):
  _md5sum = "05da1f979f09c4d88f36b0c5fbe197e6"
  _type = "ssl_msgs/trajectory"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """LinearMotionInstant start
LinearMotionInstant goal
MotionConstraints m_c
time startTime
DynamicObstacle[] dynamic_obstacle
point_2d biasWaypoints

================================================================================
MSG: ssl_msgs/LinearMotionInstant
point_2d pos
point_2d vel

================================================================================
MSG: ssl_msgs/point_2d
float64 x
float64 y

================================================================================
MSG: ssl_msgs/MotionConstraints
float64 max_speed
float64 max_acceleration

================================================================================
MSG: ssl_msgs/DynamicObstacle
point_2d pos
float64 radius

"""
  __slots__ = ['start','goal','m_c','startTime','dynamic_obstacle','biasWaypoints']
  _slot_types = ['ssl_msgs/LinearMotionInstant','ssl_msgs/LinearMotionInstant','ssl_msgs/MotionConstraints','time','ssl_msgs/DynamicObstacle[]','ssl_msgs/point_2d']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       start,goal,m_c,startTime,dynamic_obstacle,biasWaypoints

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(trajectory, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.start is None:
        self.start = ssl_msgs.msg.LinearMotionInstant()
      if self.goal is None:
        self.goal = ssl_msgs.msg.LinearMotionInstant()
      if self.m_c is None:
        self.m_c = ssl_msgs.msg.MotionConstraints()
      if self.startTime is None:
        self.startTime = genpy.Time()
      if self.dynamic_obstacle is None:
        self.dynamic_obstacle = []
      if self.biasWaypoints is None:
        self.biasWaypoints = ssl_msgs.msg.point_2d()
    else:
      self.start = ssl_msgs.msg.LinearMotionInstant()
      self.goal = ssl_msgs.msg.LinearMotionInstant()
      self.m_c = ssl_msgs.msg.MotionConstraints()
      self.startTime = genpy.Time()
      self.dynamic_obstacle = []
      self.biasWaypoints = ssl_msgs.msg.point_2d()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_10d2I().pack(_x.start.pos.x, _x.start.pos.y, _x.start.vel.x, _x.start.vel.y, _x.goal.pos.x, _x.goal.pos.y, _x.goal.vel.x, _x.goal.vel.y, _x.m_c.max_speed, _x.m_c.max_acceleration, _x.startTime.secs, _x.startTime.nsecs))
      length = len(self.dynamic_obstacle)
      buff.write(_struct_I.pack(length))
      for val1 in self.dynamic_obstacle:
        _v1 = val1.pos
        _x = _v1
        buff.write(_get_struct_2d().pack(_x.x, _x.y))
        _x = val1.radius
        buff.write(_get_struct_d().pack(_x))
      _x = self
      buff.write(_get_struct_2d().pack(_x.biasWaypoints.x, _x.biasWaypoints.y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.start is None:
        self.start = ssl_msgs.msg.LinearMotionInstant()
      if self.goal is None:
        self.goal = ssl_msgs.msg.LinearMotionInstant()
      if self.m_c is None:
        self.m_c = ssl_msgs.msg.MotionConstraints()
      if self.startTime is None:
        self.startTime = genpy.Time()
      if self.dynamic_obstacle is None:
        self.dynamic_obstacle = None
      if self.biasWaypoints is None:
        self.biasWaypoints = ssl_msgs.msg.point_2d()
      end = 0
      _x = self
      start = end
      end += 88
      (_x.start.pos.x, _x.start.pos.y, _x.start.vel.x, _x.start.vel.y, _x.goal.pos.x, _x.goal.pos.y, _x.goal.vel.x, _x.goal.vel.y, _x.m_c.max_speed, _x.m_c.max_acceleration, _x.startTime.secs, _x.startTime.nsecs,) = _get_struct_10d2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.dynamic_obstacle = []
      for i in range(0, length):
        val1 = ssl_msgs.msg.DynamicObstacle()
        _v2 = val1.pos
        _x = _v2
        start = end
        end += 16
        (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
        start = end
        end += 8
        (val1.radius,) = _get_struct_d().unpack(str[start:end])
        self.dynamic_obstacle.append(val1)
      _x = self
      start = end
      end += 16
      (_x.biasWaypoints.x, _x.biasWaypoints.y,) = _get_struct_2d().unpack(str[start:end])
      self.startTime.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_10d2I().pack(_x.start.pos.x, _x.start.pos.y, _x.start.vel.x, _x.start.vel.y, _x.goal.pos.x, _x.goal.pos.y, _x.goal.vel.x, _x.goal.vel.y, _x.m_c.max_speed, _x.m_c.max_acceleration, _x.startTime.secs, _x.startTime.nsecs))
      length = len(self.dynamic_obstacle)
      buff.write(_struct_I.pack(length))
      for val1 in self.dynamic_obstacle:
        _v3 = val1.pos
        _x = _v3
        buff.write(_get_struct_2d().pack(_x.x, _x.y))
        _x = val1.radius
        buff.write(_get_struct_d().pack(_x))
      _x = self
      buff.write(_get_struct_2d().pack(_x.biasWaypoints.x, _x.biasWaypoints.y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.start is None:
        self.start = ssl_msgs.msg.LinearMotionInstant()
      if self.goal is None:
        self.goal = ssl_msgs.msg.LinearMotionInstant()
      if self.m_c is None:
        self.m_c = ssl_msgs.msg.MotionConstraints()
      if self.startTime is None:
        self.startTime = genpy.Time()
      if self.dynamic_obstacle is None:
        self.dynamic_obstacle = None
      if self.biasWaypoints is None:
        self.biasWaypoints = ssl_msgs.msg.point_2d()
      end = 0
      _x = self
      start = end
      end += 88
      (_x.start.pos.x, _x.start.pos.y, _x.start.vel.x, _x.start.vel.y, _x.goal.pos.x, _x.goal.pos.y, _x.goal.vel.x, _x.goal.vel.y, _x.m_c.max_speed, _x.m_c.max_acceleration, _x.startTime.secs, _x.startTime.nsecs,) = _get_struct_10d2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.dynamic_obstacle = []
      for i in range(0, length):
        val1 = ssl_msgs.msg.DynamicObstacle()
        _v4 = val1.pos
        _x = _v4
        start = end
        end += 16
        (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
        start = end
        end += 8
        (val1.radius,) = _get_struct_d().unpack(str[start:end])
        self.dynamic_obstacle.append(val1)
      _x = self
      start = end
      end += 16
      (_x.biasWaypoints.x, _x.biasWaypoints.y,) = _get_struct_2d().unpack(str[start:end])
      self.startTime.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_10d2I = None
def _get_struct_10d2I():
    global _struct_10d2I
    if _struct_10d2I is None:
        _struct_10d2I = struct.Struct("<10d2I")
    return _struct_10d2I
_struct_2d = None
def _get_struct_2d():
    global _struct_2d
    if _struct_2d is None:
        _struct_2d = struct.Struct("<2d")
    return _struct_2d
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
