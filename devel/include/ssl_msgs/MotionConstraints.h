// Generated by gencpp from file ssl_msgs/MotionConstraints.msg
// DO NOT EDIT!


#ifndef SSL_MSGS_MESSAGE_MOTIONCONSTRAINTS_H
#define SSL_MSGS_MESSAGE_MOTIONCONSTRAINTS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ssl_msgs
{
template <class ContainerAllocator>
struct MotionConstraints_
{
  typedef MotionConstraints_<ContainerAllocator> Type;

  MotionConstraints_()
    : max_speed(0.0)
    , max_acceleration(0.0)  {
    }
  MotionConstraints_(const ContainerAllocator& _alloc)
    : max_speed(0.0)
    , max_acceleration(0.0)  {
  (void)_alloc;
    }



   typedef double _max_speed_type;
  _max_speed_type max_speed;

   typedef double _max_acceleration_type;
  _max_acceleration_type max_acceleration;





  typedef boost::shared_ptr< ::ssl_msgs::MotionConstraints_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ssl_msgs::MotionConstraints_<ContainerAllocator> const> ConstPtr;

}; // struct MotionConstraints_

typedef ::ssl_msgs::MotionConstraints_<std::allocator<void> > MotionConstraints;

typedef boost::shared_ptr< ::ssl_msgs::MotionConstraints > MotionConstraintsPtr;
typedef boost::shared_ptr< ::ssl_msgs::MotionConstraints const> MotionConstraintsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ssl_msgs::MotionConstraints_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ssl_msgs::MotionConstraints_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ssl_msgs::MotionConstraints_<ContainerAllocator1> & lhs, const ::ssl_msgs::MotionConstraints_<ContainerAllocator2> & rhs)
{
  return lhs.max_speed == rhs.max_speed &&
    lhs.max_acceleration == rhs.max_acceleration;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ssl_msgs::MotionConstraints_<ContainerAllocator1> & lhs, const ::ssl_msgs::MotionConstraints_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ssl_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ssl_msgs::MotionConstraints_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ssl_msgs::MotionConstraints_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ssl_msgs::MotionConstraints_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ssl_msgs::MotionConstraints_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ssl_msgs::MotionConstraints_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ssl_msgs::MotionConstraints_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ssl_msgs::MotionConstraints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8312ddf26b5967c12493eebff20ca2bf";
  }

  static const char* value(const ::ssl_msgs::MotionConstraints_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8312ddf26b5967c1ULL;
  static const uint64_t static_value2 = 0x2493eebff20ca2bfULL;
};

template<class ContainerAllocator>
struct DataType< ::ssl_msgs::MotionConstraints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ssl_msgs/MotionConstraints";
  }

  static const char* value(const ::ssl_msgs::MotionConstraints_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ssl_msgs::MotionConstraints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 max_speed\n"
"float64 max_acceleration\n"
;
  }

  static const char* value(const ::ssl_msgs::MotionConstraints_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ssl_msgs::MotionConstraints_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.max_speed);
      stream.next(m.max_acceleration);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MotionConstraints_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ssl_msgs::MotionConstraints_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ssl_msgs::MotionConstraints_<ContainerAllocator>& v)
  {
    s << indent << "max_speed: ";
    Printer<double>::stream(s, indent + "  ", v.max_speed);
    s << indent << "max_acceleration: ";
    Printer<double>::stream(s, indent + "  ", v.max_acceleration);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SSL_MSGS_MESSAGE_MOTIONCONSTRAINTS_H
