// Generated by gencpp from file ssl_msgs/LinearMotionInstant.msg
// DO NOT EDIT!


#ifndef SSL_MSGS_MESSAGE_LINEARMOTIONINSTANT_H
#define SSL_MSGS_MESSAGE_LINEARMOTIONINSTANT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ssl_msgs/point_2d.h>
#include <ssl_msgs/point_2d.h>

namespace ssl_msgs
{
template <class ContainerAllocator>
struct LinearMotionInstant_
{
  typedef LinearMotionInstant_<ContainerAllocator> Type;

  LinearMotionInstant_()
    : pos()
    , vel()  {
    }
  LinearMotionInstant_(const ContainerAllocator& _alloc)
    : pos(_alloc)
    , vel(_alloc)  {
  (void)_alloc;
    }



   typedef  ::ssl_msgs::point_2d_<ContainerAllocator>  _pos_type;
  _pos_type pos;

   typedef  ::ssl_msgs::point_2d_<ContainerAllocator>  _vel_type;
  _vel_type vel;





  typedef boost::shared_ptr< ::ssl_msgs::LinearMotionInstant_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ssl_msgs::LinearMotionInstant_<ContainerAllocator> const> ConstPtr;

}; // struct LinearMotionInstant_

typedef ::ssl_msgs::LinearMotionInstant_<std::allocator<void> > LinearMotionInstant;

typedef boost::shared_ptr< ::ssl_msgs::LinearMotionInstant > LinearMotionInstantPtr;
typedef boost::shared_ptr< ::ssl_msgs::LinearMotionInstant const> LinearMotionInstantConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ssl_msgs::LinearMotionInstant_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ssl_msgs::LinearMotionInstant_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ssl_msgs::LinearMotionInstant_<ContainerAllocator1> & lhs, const ::ssl_msgs::LinearMotionInstant_<ContainerAllocator2> & rhs)
{
  return lhs.pos == rhs.pos &&
    lhs.vel == rhs.vel;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ssl_msgs::LinearMotionInstant_<ContainerAllocator1> & lhs, const ::ssl_msgs::LinearMotionInstant_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ssl_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ssl_msgs::LinearMotionInstant_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ssl_msgs::LinearMotionInstant_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ssl_msgs::LinearMotionInstant_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ssl_msgs::LinearMotionInstant_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ssl_msgs::LinearMotionInstant_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ssl_msgs::LinearMotionInstant_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ssl_msgs::LinearMotionInstant_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7676e8ef895f61056ed15bdab6d0319e";
  }

  static const char* value(const ::ssl_msgs::LinearMotionInstant_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7676e8ef895f6105ULL;
  static const uint64_t static_value2 = 0x6ed15bdab6d0319eULL;
};

template<class ContainerAllocator>
struct DataType< ::ssl_msgs::LinearMotionInstant_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ssl_msgs/LinearMotionInstant";
  }

  static const char* value(const ::ssl_msgs::LinearMotionInstant_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ssl_msgs::LinearMotionInstant_<ContainerAllocator> >
{
  static const char* value()
  {
    return "point_2d pos\n"
"point_2d vel\n"
"\n"
"================================================================================\n"
"MSG: ssl_msgs/point_2d\n"
"float64 x\n"
"float64 y\n"
;
  }

  static const char* value(const ::ssl_msgs::LinearMotionInstant_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ssl_msgs::LinearMotionInstant_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pos);
      stream.next(m.vel);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LinearMotionInstant_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ssl_msgs::LinearMotionInstant_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ssl_msgs::LinearMotionInstant_<ContainerAllocator>& v)
  {
    s << indent << "pos: ";
    s << std::endl;
    Printer< ::ssl_msgs::point_2d_<ContainerAllocator> >::stream(s, indent + "  ", v.pos);
    s << indent << "vel: ";
    s << std::endl;
    Printer< ::ssl_msgs::point_2d_<ContainerAllocator> >::stream(s, indent + "  ", v.vel);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SSL_MSGS_MESSAGE_LINEARMOTIONINSTANT_H
