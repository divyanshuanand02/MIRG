// Generated by gencpp from file ssl_msgs/trajectory.msg
// DO NOT EDIT!


#ifndef SSL_MSGS_MESSAGE_TRAJECTORY_H
#define SSL_MSGS_MESSAGE_TRAJECTORY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ssl_msgs/LinearMotionInstant.h>
#include <ssl_msgs/LinearMotionInstant.h>
#include <ssl_msgs/MotionConstraints.h>
#include <ssl_msgs/DynamicObstacle.h>
#include <ssl_msgs/point_2d.h>

namespace ssl_msgs
{
template <class ContainerAllocator>
struct trajectory_
{
  typedef trajectory_<ContainerAllocator> Type;

  trajectory_()
    : start()
    , goal()
    , m_c()
    , startTime()
    , dynamic_obstacle()
    , biasWaypoints()  {
    }
  trajectory_(const ContainerAllocator& _alloc)
    : start(_alloc)
    , goal(_alloc)
    , m_c(_alloc)
    , startTime()
    , dynamic_obstacle(_alloc)
    , biasWaypoints(_alloc)  {
  (void)_alloc;
    }



   typedef  ::ssl_msgs::LinearMotionInstant_<ContainerAllocator>  _start_type;
  _start_type start;

   typedef  ::ssl_msgs::LinearMotionInstant_<ContainerAllocator>  _goal_type;
  _goal_type goal;

   typedef  ::ssl_msgs::MotionConstraints_<ContainerAllocator>  _m_c_type;
  _m_c_type m_c;

   typedef ros::Time _startTime_type;
  _startTime_type startTime;

   typedef std::vector< ::ssl_msgs::DynamicObstacle_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::ssl_msgs::DynamicObstacle_<ContainerAllocator> >::other >  _dynamic_obstacle_type;
  _dynamic_obstacle_type dynamic_obstacle;

   typedef  ::ssl_msgs::point_2d_<ContainerAllocator>  _biasWaypoints_type;
  _biasWaypoints_type biasWaypoints;





  typedef boost::shared_ptr< ::ssl_msgs::trajectory_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ssl_msgs::trajectory_<ContainerAllocator> const> ConstPtr;

}; // struct trajectory_

typedef ::ssl_msgs::trajectory_<std::allocator<void> > trajectory;

typedef boost::shared_ptr< ::ssl_msgs::trajectory > trajectoryPtr;
typedef boost::shared_ptr< ::ssl_msgs::trajectory const> trajectoryConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ssl_msgs::trajectory_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ssl_msgs::trajectory_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ssl_msgs::trajectory_<ContainerAllocator1> & lhs, const ::ssl_msgs::trajectory_<ContainerAllocator2> & rhs)
{
  return lhs.start == rhs.start &&
    lhs.goal == rhs.goal &&
    lhs.m_c == rhs.m_c &&
    lhs.startTime == rhs.startTime &&
    lhs.dynamic_obstacle == rhs.dynamic_obstacle &&
    lhs.biasWaypoints == rhs.biasWaypoints;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ssl_msgs::trajectory_<ContainerAllocator1> & lhs, const ::ssl_msgs::trajectory_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ssl_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ssl_msgs::trajectory_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ssl_msgs::trajectory_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ssl_msgs::trajectory_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ssl_msgs::trajectory_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ssl_msgs::trajectory_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ssl_msgs::trajectory_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ssl_msgs::trajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "05da1f979f09c4d88f36b0c5fbe197e6";
  }

  static const char* value(const ::ssl_msgs::trajectory_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x05da1f979f09c4d8ULL;
  static const uint64_t static_value2 = 0x8f36b0c5fbe197e6ULL;
};

template<class ContainerAllocator>
struct DataType< ::ssl_msgs::trajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ssl_msgs/trajectory";
  }

  static const char* value(const ::ssl_msgs::trajectory_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ssl_msgs::trajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "LinearMotionInstant start\n"
"LinearMotionInstant goal\n"
"MotionConstraints m_c\n"
"time startTime\n"
"DynamicObstacle[] dynamic_obstacle\n"
"point_2d biasWaypoints\n"
"\n"
"================================================================================\n"
"MSG: ssl_msgs/LinearMotionInstant\n"
"point_2d pos\n"
"point_2d vel\n"
"\n"
"================================================================================\n"
"MSG: ssl_msgs/point_2d\n"
"float64 x\n"
"float64 y\n"
"\n"
"================================================================================\n"
"MSG: ssl_msgs/MotionConstraints\n"
"float64 max_speed\n"
"float64 max_acceleration\n"
"\n"
"================================================================================\n"
"MSG: ssl_msgs/DynamicObstacle\n"
"point_2d pos\n"
"float64 radius\n"
"\n"
;
  }

  static const char* value(const ::ssl_msgs::trajectory_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ssl_msgs::trajectory_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.start);
      stream.next(m.goal);
      stream.next(m.m_c);
      stream.next(m.startTime);
      stream.next(m.dynamic_obstacle);
      stream.next(m.biasWaypoints);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct trajectory_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ssl_msgs::trajectory_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ssl_msgs::trajectory_<ContainerAllocator>& v)
  {
    s << indent << "start: ";
    s << std::endl;
    Printer< ::ssl_msgs::LinearMotionInstant_<ContainerAllocator> >::stream(s, indent + "  ", v.start);
    s << indent << "goal: ";
    s << std::endl;
    Printer< ::ssl_msgs::LinearMotionInstant_<ContainerAllocator> >::stream(s, indent + "  ", v.goal);
    s << indent << "m_c: ";
    s << std::endl;
    Printer< ::ssl_msgs::MotionConstraints_<ContainerAllocator> >::stream(s, indent + "  ", v.m_c);
    s << indent << "startTime: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.startTime);
    s << indent << "dynamic_obstacle[]" << std::endl;
    for (size_t i = 0; i < v.dynamic_obstacle.size(); ++i)
    {
      s << indent << "  dynamic_obstacle[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ssl_msgs::DynamicObstacle_<ContainerAllocator> >::stream(s, indent + "    ", v.dynamic_obstacle[i]);
    }
    s << indent << "biasWaypoints: ";
    s << std::endl;
    Printer< ::ssl_msgs::point_2d_<ContainerAllocator> >::stream(s, indent + "  ", v.biasWaypoints);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SSL_MSGS_MESSAGE_TRAJECTORY_H
