// Generated by gencpp from file ssl_msgs/StaticObstacle.msg
// DO NOT EDIT!


#ifndef SSL_MSGS_MESSAGE_STATICOBSTACLE_H
#define SSL_MSGS_MESSAGE_STATICOBSTACLE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ssl_msgs/point_2d.h>

namespace ssl_msgs
{
template <class ContainerAllocator>
struct StaticObstacle_
{
  typedef StaticObstacle_<ContainerAllocator> Type;

  StaticObstacle_()
    : pos()
    , radius(0.0)  {
    }
  StaticObstacle_(const ContainerAllocator& _alloc)
    : pos(_alloc)
    , radius(0.0)  {
  (void)_alloc;
    }



   typedef  ::ssl_msgs::point_2d_<ContainerAllocator>  _pos_type;
  _pos_type pos;

   typedef double _radius_type;
  _radius_type radius;





  typedef boost::shared_ptr< ::ssl_msgs::StaticObstacle_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ssl_msgs::StaticObstacle_<ContainerAllocator> const> ConstPtr;

}; // struct StaticObstacle_

typedef ::ssl_msgs::StaticObstacle_<std::allocator<void> > StaticObstacle;

typedef boost::shared_ptr< ::ssl_msgs::StaticObstacle > StaticObstaclePtr;
typedef boost::shared_ptr< ::ssl_msgs::StaticObstacle const> StaticObstacleConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ssl_msgs::StaticObstacle_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ssl_msgs::StaticObstacle_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ssl_msgs::StaticObstacle_<ContainerAllocator1> & lhs, const ::ssl_msgs::StaticObstacle_<ContainerAllocator2> & rhs)
{
  return lhs.pos == rhs.pos &&
    lhs.radius == rhs.radius;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ssl_msgs::StaticObstacle_<ContainerAllocator1> & lhs, const ::ssl_msgs::StaticObstacle_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ssl_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ssl_msgs::StaticObstacle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ssl_msgs::StaticObstacle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ssl_msgs::StaticObstacle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ssl_msgs::StaticObstacle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ssl_msgs::StaticObstacle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ssl_msgs::StaticObstacle_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ssl_msgs::StaticObstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9e88681713bde42f279e98f00927b826";
  }

  static const char* value(const ::ssl_msgs::StaticObstacle_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9e88681713bde42fULL;
  static const uint64_t static_value2 = 0x279e98f00927b826ULL;
};

template<class ContainerAllocator>
struct DataType< ::ssl_msgs::StaticObstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ssl_msgs/StaticObstacle";
  }

  static const char* value(const ::ssl_msgs::StaticObstacle_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ssl_msgs::StaticObstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "point_2d pos\n"
"float64 radius\n"
"\n"
"================================================================================\n"
"MSG: ssl_msgs/point_2d\n"
"float64 x\n"
"float64 y\n"
;
  }

  static const char* value(const ::ssl_msgs::StaticObstacle_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ssl_msgs::StaticObstacle_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pos);
      stream.next(m.radius);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct StaticObstacle_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ssl_msgs::StaticObstacle_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ssl_msgs::StaticObstacle_<ContainerAllocator>& v)
  {
    s << indent << "pos: ";
    s << std::endl;
    Printer< ::ssl_msgs::point_2d_<ContainerAllocator> >::stream(s, indent + "  ", v.pos);
    s << indent << "radius: ";
    Printer<double>::stream(s, indent + "  ", v.radius);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SSL_MSGS_MESSAGE_STATICOBSTACLE_H
