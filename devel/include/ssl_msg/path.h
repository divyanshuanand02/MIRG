// Generated by gencpp from file ssl_msg/path.msg
// DO NOT EDIT!


#ifndef SSL_MSG_MESSAGE_PATH_H
#define SSL_MSG_MESSAGE_PATH_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ssl_msg
{
template <class ContainerAllocator>
struct path_
{
  typedef path_<ContainerAllocator> Type;

  path_()
    : bot_id(0)
    , avoid_ball(false)  {
    }
  path_(const ContainerAllocator& _alloc)
    : bot_id(0)
    , avoid_ball(false)  {
  (void)_alloc;
    }



   typedef uint8_t _bot_id_type;
  _bot_id_type bot_id;

   typedef uint8_t _avoid_ball_type;
  _avoid_ball_type avoid_ball;





  typedef boost::shared_ptr< ::ssl_msg::path_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ssl_msg::path_<ContainerAllocator> const> ConstPtr;

}; // struct path_

typedef ::ssl_msg::path_<std::allocator<void> > path;

typedef boost::shared_ptr< ::ssl_msg::path > pathPtr;
typedef boost::shared_ptr< ::ssl_msg::path const> pathConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ssl_msg::path_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ssl_msg::path_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ssl_msg::path_<ContainerAllocator1> & lhs, const ::ssl_msg::path_<ContainerAllocator2> & rhs)
{
  return lhs.bot_id == rhs.bot_id &&
    lhs.avoid_ball == rhs.avoid_ball;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ssl_msg::path_<ContainerAllocator1> & lhs, const ::ssl_msg::path_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ssl_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ssl_msg::path_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ssl_msg::path_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ssl_msg::path_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ssl_msg::path_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ssl_msg::path_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ssl_msg::path_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ssl_msg::path_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6b290706c1e9391a3b799a706b62cb02";
  }

  static const char* value(const ::ssl_msg::path_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6b290706c1e9391aULL;
  static const uint64_t static_value2 = 0x3b799a706b62cb02ULL;
};

template<class ContainerAllocator>
struct DataType< ::ssl_msg::path_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ssl_msg/path";
  }

  static const char* value(const ::ssl_msg::path_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ssl_msg::path_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 bot_id\n"
"bool avoid_ball\n"
;
  }

  static const char* value(const ::ssl_msg::path_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ssl_msg::path_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.bot_id);
      stream.next(m.avoid_ball);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct path_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ssl_msg::path_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ssl_msg::path_<ContainerAllocator>& v)
  {
    s << indent << "bot_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.bot_id);
    s << indent << "avoid_ball: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.avoid_ball);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SSL_MSG_MESSAGE_PATH_H
